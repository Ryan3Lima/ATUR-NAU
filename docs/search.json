[
  {
    "objectID": "Notebooks/Misc_Tools.html",
    "href": "Notebooks/Misc_Tools.html",
    "title": "Resize images for display in notebooks",
    "section": "",
    "text": "This is just a notebook of useful functions I needed to create while making this tutorial\n\nResize images for display in notebooks\n\nfrom PIL import Image\nimport os\n\ndef normalize_path(path):\n    \"\"\"\n    Normalizes the given path to the correct form for the current platform.\n\n    Args:\n    path (str): The input path.\n\n    Returns:\n    str: The normalized path.\n    \"\"\"\n    return os.path.normpath(path)\n\ndef preview_resize(input_path, percent):\n    \"\"\"\n    Displays the current image size and shows a preview of the image resized by the given percentage.\n\n    Args:\n    input_path (str): Path to the input image.\n    percent (float): Percentage to resize the image.\n    \"\"\"\n    input_path = normalize_path(input_path)\n    with Image.open(input_path) as img:\n        # Display current size\n        current_size = img.size\n        print(f\"Current size: {current_size}\")\n\n        # Calculate target size\n        target_size = (int(current_size[0] * percent / 100), int(current_size[1] * percent / 100))\n        \n        # Resize the image for preview\n        preview_img = img.resize(target_size, Image.LANCZOS)\n        \n        # Show preview of the resized image\n        preview_img.show()\n        print(f\"Preview of size: {target_size} (scaled by {percent}%)\")\n\ndef resize_image(input_path, output_path, percent):\n    \"\"\"\n    Resizes the image by the given percentage and saves it to the output path.\n\n    Args:\n    input_path (str): Path to the input image.\n    output_path (str): Path to save the resized image.\n    percent (float): Percentage to resize the image.\n    \"\"\"\n    input_path = normalize_path(input_path)\n    output_path = normalize_path(output_path)\n    with Image.open(input_path) as img:\n        # Calculate target size\n        target_size = (int(img.size[0] * percent / 100), int(img.size[1] * percent / 100))\n        \n        # Resize the image\n        resized_img = img.resize(target_size, Image.LANCZOS)\n        \n        # Save the resized image\n        resized_img.save(output_path)\n        print(f\"Resized image saved as: {output_path}\")\n\n        # Display new size\n        new_size = resized_img.size\n        print(f\"New size: {new_size}\")\n\n\n\n# Example usage:\ninput_file = 'C:/Users/rl587/Documents/GitHub/ATUR-WIKI/Notebooks/Learn_the_workflow/03_01.PNG'\noutput_file = 'C:/Users/rl587/Documents/GitHub/ATUR-WIKI/Notebooks/Learn_the_workflow/03_01_rz.png'\nresize_percent = 50  # Resize to 50% of the original size\n\n# Preview the resize\n# Uncomment the following line\n#preview_resize(input_file, resize_percent)\n\n\n\n\n\nCurrent size: (1288, 751)\nPreview of size: (644, 375) (scaled by 50%)\n\n\n\n# Uncomment the following line to actually resize the image after previewing\n#resize_image(input_file, output_file, resize_percent)\n\nResized image saved as: C:\\Users\\rl587\\Documents\\GitHub\\ATUR-WIKI\\Notebooks\\Learn_the_workflow\\03_01_rz.png\nNew size: (644, 375)"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/03_quarto_basics.html",
    "href": "Notebooks/Learn_the_workflow/03_quarto_basics.html",
    "title": "03 - Quarto Basics",
    "section": "",
    "text": "Now I get to show you all cool things you can do with quarto\nThe following is an abbreviated version of the demonstrations you can (and should eventually) go though by following the link below:\nQuarto - Getting Started\nIf you followed the instructions in the last notebook 02_Getting Started, then quarto should be downloaded and running in the background, you don’t have to ever open it or enable it.\nQuarto works in the background with jupyter notebooks and allows you to turn notebooks like this into websites (converting to html) or many other things through “rendering’.\nWhen you render a Jupyter notebook with Quarto, the contents of the notebook (code, markdown, and outputs) are converted to plain markdown and then processed by Pandoc, which creates the finished format."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/03_quarto_basics.html#render-in-terminal",
    "href": "Notebooks/Learn_the_workflow/03_quarto_basics.html#render-in-terminal",
    "title": "03 - Quarto Basics",
    "section": "2.1 Render in terminal",
    "text": "2.1 Render in terminal\n\nIn the Jupyter ‘Home’ browser tab, click File&gt;New&gt;Terminal\n\n\n\nA terminal tab will have opened, go to that tab, and type in:\n\nPS C:...somepath/&gt; quarto preview Learn_the_workflow/03_quarto_basics-Copy1.ipynb\n\nhit enter\n\nIt should look like this\n\n\nClick on the link where it sais ‘Browse at http://localhost:SOME_NUMBERS’\n\nAnother tab should have opened, and that is the notebook shown in HTML as a preview! in order to export it as an saved html file, change the command from:\nPS C:...somepath/&gt; quarto preview Learn_the_workflow/03_quarto_basics-Copy1.ipynb\nto:\nPS C:...somepath/&gt;quarto render hello.ipynb --to html\nBut typically you only render after you have a finished product, so lets stick with the quarto preview command. Each time you save your jupyter notebook it will update. Which is pretty cool. I like to have the preview on screen next to the working notebook so I can see my changes in real time."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/03_quarto_basics.html#computations",
    "href": "Notebooks/Learn_the_workflow/03_quarto_basics.html#computations",
    "title": "03 - Quarto Basics",
    "section": "3.1 Computations",
    "text": "3.1 Computations\n\n3.1.1 Numpy\n\nNumPy (Numerical Python) is a fundamental package for scientific computing in Python. It provides support for arrays, matrices, and many mathematical functions to operate on these data structures efficiently.\n\n\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n\n\n\n\n3.1.2 Matplotlib\n\nMatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. It is widely used for generating plots, charts, and figures for data analysis and scientific research.\n\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n\n\n\n\n\n\n\n\n\n\n3.1.3 Plotly\nPlotly is an open-source graphing library for Python that is known for its ability to create interactive, publication-quality graphs. It is built on top of the popular JavaScript library D3.js and provides a high-level API for building complex visualizations easily. Plotly can be used in various contexts, including Jupyter Notebooks, standalone HTML files, and web applications.\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/01_Prerequisites.html",
    "href": "Notebooks/Learn_the_workflow/01_Prerequisites.html",
    "title": "01 - Prerequisites",
    "section": "",
    "text": "The goal of this workflow is, in short, to share what we have learned. But also to provide as much context and guidance as possible so this research does not sit on a shelf somewhere.\nTherefore we are going to create a knowledge repository. However, in order to do that, it will take a little bit of work upfront. You are going to have to spend some time learning some new things. I assure you though the hard work will have a great payoff.\nThe workflow demonstrated here works well with both Python (like this notebook) but also with R. Infact, Quarto (our open source technical publishing system) is going to eventually replace R-markdown.\nBut now here are some examples of things you can do generally with github and quarto (CLICK THE LINKS BELOW):\n\n\nPractical Deep Learning NASA-Openscapes\n\n\n\nA Sample Title - The SocioEconomic Aspects of Stock Assessments HTML for web publishing\n\n\n\nAn Educator’s Perspective of the tidyverse\n\n\n\nHands-On Programming with R\n\n\n\nShiny web framework for R Jupyter interactive widgets"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/01_Prerequisites.html#the-big-picture",
    "href": "Notebooks/Learn_the_workflow/01_Prerequisites.html#the-big-picture",
    "title": "01 - Prerequisites",
    "section": "",
    "text": "The goal of this workflow is, in short, to share what we have learned. But also to provide as much context and guidance as possible so this research does not sit on a shelf somewhere.\nTherefore we are going to create a knowledge repository. However, in order to do that, it will take a little bit of work upfront. You are going to have to spend some time learning some new things. I assure you though the hard work will have a great payoff.\nThe workflow demonstrated here works well with both Python (like this notebook) but also with R. Infact, Quarto (our open source technical publishing system) is going to eventually replace R-markdown.\nBut now here are some examples of things you can do generally with github and quarto (CLICK THE LINKS BELOW):\n\n\nPractical Deep Learning NASA-Openscapes\n\n\n\nA Sample Title - The SocioEconomic Aspects of Stock Assessments HTML for web publishing\n\n\n\nAn Educator’s Perspective of the tidyverse\n\n\n\nHands-On Programming with R\n\n\n\nShiny web framework for R Jupyter interactive widgets"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/01_Prerequisites.html#the-nuts-and-bolts---how-it-fits-together",
    "href": "Notebooks/Learn_the_workflow/01_Prerequisites.html#the-nuts-and-bolts---how-it-fits-together",
    "title": "01 - Prerequisites",
    "section": "2 The Nuts and Bolts - How it fits together",
    "text": "2 The Nuts and Bolts - How it fits together\nA brief overview of the way these various programs and platforms fit together.\n\n2.1 The Ecosystem\nThis ecosystem contains several different components, programs and/or environments. They are as follows:\n\n2.1.1 For Documentation and Version Control\nQuarto\nan open-source scientific and technical publishing system.\n\n\n\nYou can create dynamic content using Python, R, Julia, and Observable.\npublish repdoucable, production quality aticles, presentations, dashboards, websites, blocks, and books in HTML, PDF, MS Word, ePub and More.\n\n\nGithub\nA platform for version control and collaboration using Git. It allows you to host and share your data repository, track changes, and collaborate with others. GitHub Pages can be used to host your Quarto-generated documentation and wiki.\n\n\n\n2.1.2 Python workflow\npython\nA versatile programming language widely used in data science, machine learning, and scientific computing. It has a rich ecosystem of libraries for data analysis, visualization, and machine learning, making it an essential tool for building and analyzing your data repository.\n\nAnaconda\nA distribution of Python and R for scientific computing and data science. It simplifies package management and deployment. Anaconda can be used to set up your data science environment and manage dependencies.\n\nJupyter\nAn open-source project providing interactive notebooks for code, visualizations, and narrative text. Jupyter Notebooks are useful for data exploration, analysis, and sharing interactive reports.\n\n\n\n2.1.3 R workflow\nR\nA programming language for statistical computing and graphics. It can be used for data analysis and visualization within your data repository.\n\nR-Studio\nAn integrated development environment (IDE) for R. It provides a user-friendly interface for coding in R and supports R Markdown, which can be used with Quarto for creating dynamic documents.\n\n\n\n\n\n\n\nNote\n\n\n\nAnaconda is optional for R-workflow\n\n\n\n\n2.1.4 For File Storage\nCyVerse/AWS (Cloud Storage):\nCloud storage solutions for hosting large files that cannot be stored on GitHub. These platforms provide URLs to access the files, enabling integration with your data repository and documentation.\n \n\n\n\n2.2 How they fit together\n\n\n\nEcosystem\n\n\n\n\nAnaconda: Use Anaconda to create and manage your Python and R environments, ensuring all necessary packages are installed.\nJupyter: Use Jupyter Notebooks for data analysis and creating interactive reports. These notebooks can be converted to Quarto documents.\nPython: Utilize Python’s extensive libraries and tools for data analysis, machine learning, and visualization within Jupyter notebooks or standalone scripts\nR and RStudio: Use RStudio for R-based data analysis and creating R Markdown documents. These can also be integrated into Quarto.\nQuarto: Use Quarto to compile Jupyter Notebooks and R Markdown documents into a cohesive set of documentation and reports. Quarto can generate static websites, PDFs, and more.\nGitHub: Host your data repository on GitHub. Use GitHub for version control and collaboration. Host your Quarto-generated documentation and wiki on GitHub Pages for easy access and sharing.\nCyVerse/AWS (Cloud Storage): Store large files that cannot be accommodated on GitHub. Use CyVerse or AWS S3 to host these files and generate URLs for access. Include these URLs in your Quarto documentation, Jupyter Notebooks, and R Markdown files to provide seamless access to the data."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/01_Prerequisites.html#getting-started",
    "href": "Notebooks/Learn_the_workflow/01_Prerequisites.html#getting-started",
    "title": "01 - Prerequisites",
    "section": "3 Getting Started",
    "text": "3 Getting Started\nIn the next notebook I will describe how to setup this ecosystem on your computer. Specifically using Python, Anaconda, Jupyter notebooks, Github and Quarto\n\n\n\n\n\n\nNote\n\n\n\nPerhaps someone else can demonstrate an R-studio workflow and Cyverse integration\n\n\nlink to next page"
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html",
    "href": "Notebooks/Intro_to_GDAL.html",
    "title": "Introduction to GDAL",
    "section": "",
    "text": "A short tutorial using GDAL in Python\nGDAL is a translator library for raster and vector geospatial data formates that is released under an MIT style Open Source License by the Open Source Geospatial Foundation. As a library, it presents a single raster abstract data model and single vector abstract data model to the calling application for all supported formates. It also comes with a variety of useful command l ine utilities for data translation and processing.\nGDAL (Geospatial Data Abstraction Library) is an open-source library used for reading, writing, and processing raster and vector geospatial data formats. It supports a wide range of file formats and provides powerful tools for geospatial data manipulation, making it a key tool in GIS, remote sensing, and mapping applications. (description from ChatGPT4o)"
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#how-to-import-gdal",
    "href": "Notebooks/Intro_to_GDAL.html#how-to-import-gdal",
    "title": "Introduction to GDAL",
    "section": "1.1 How to Import GDAL",
    "text": "1.1 How to Import GDAL\n\n## after running the line above gdal is installed, but you still need to load it\nfrom osgeo import gdal\ngdal.UseExceptions()  # This will enable exceptions."
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#load-some-other-useful-libraries",
    "href": "Notebooks/Intro_to_GDAL.html#load-some-other-useful-libraries",
    "title": "Introduction to GDAL",
    "section": "1.2 Load some other useful libraries",
    "text": "1.2 Load some other useful libraries\nnumpy\nNumPy is a powerful Python library used for numerical computing. It provides support for large, multi-dimensional arrays and matrices, along with a wide range of mathematical functions to perform operations on these arrays efficiently. (description from ChatGPT4o)\nmatplotlib\nMatplotlib is a popular Python library for creating static, interactive, and animated visualizations. It is particularly useful for generating plots, graphs, and charts from data, making it a key tool for data analysis and visualization. (description from ChatGPT4o)\n\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#python-syntax-tips-f-strings",
    "href": "Notebooks/Intro_to_GDAL.html#python-syntax-tips-f-strings",
    "title": "Introduction to GDAL",
    "section": "3.1 PYTHON SYNTAX TIPS: f-STRINGS",
    "text": "3.1 PYTHON SYNTAX TIPS: f-STRINGS\nIn Python, f-strings (formatted string literals) are a concise and efficient way to embed expressions inside string literals. Introduced in Python 3.6, they allow you to insert variables or expressions directly within curly braces {} inside a string prefixed by the letter f, which automatically evaluates and formats the expressions.\n\n## f-STRINGS EXAMPLE\n\nname = \"Alice\"\nage = 30\ngreeting = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(greeting)\n\nHello, my name is Alice and I am 30 years old."
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#reading-the-data-into-a-numpy-array",
    "href": "Notebooks/Intro_to_GDAL.html#reading-the-data-into-a-numpy-array",
    "title": "Introduction to GDAL",
    "section": "3.2 Reading the data into a NumPy Array",
    "text": "3.2 Reading the data into a NumPy Array\n\n# Read the raster band as a NumPy array\nelevation_data = band.ReadAsArray()\n\n# Check the shape of the data\nprint(f\"Data Shape: {elevation_data.shape} 1/3 arcsecond\")\nprint(f\"Min Value: {elevation_data.min()} meters\")\nprint(f\"Max Value: {elevation_data.max()} meters\")\n\n# 1/3 arcsecond raster = 10m x 10m pixel size\n\nData Shape: (3612, 3612) 1/3 arcsecond\nMin Value: 1324.57958984375 meters\nMax Value: 2410.233154296875 meters"
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#get-metadata",
    "href": "Notebooks/Intro_to_GDAL.html#get-metadata",
    "title": "Introduction to GDAL",
    "section": "5.1 Get Metadata",
    "text": "5.1 Get Metadata\n\n# Get metadata for the dataset\nmetadata = dataset.GetMetadata()\nprint(f\"Metadata: {metadata}\")\n\nMetadata: {'BandDefinitionKeyword': '*', 'DataType': '*', 'AREA_OR_POINT': 'Area'}"
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#getting-specific-pixel-values",
    "href": "Notebooks/Intro_to_GDAL.html#getting-specific-pixel-values",
    "title": "Introduction to GDAL",
    "section": "5.2 Getting Specific Pixel Values",
    "text": "5.2 Getting Specific Pixel Values\nTo retreive the elevation value at a specific pixel location\n\n# Example: Get the elevation at pixel (500,500)\nx_pixel, y_pixel = 500, 500\nelevation_value = elevation_data[y_pixel,x_pixel]\nprint(f\" Elevation at pixel ({x_pixel},{y_pixel}): {elevation_value} meters\")\n\n Elevation at pixel (500,500): 1695.1978759765625 meters"
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#converting-pixel-coordinates-to-geospatial-coodrinates",
    "href": "Notebooks/Intro_to_GDAL.html#converting-pixel-coordinates-to-geospatial-coodrinates",
    "title": "Introduction to GDAL",
    "section": "5.3 Converting Pixel coordinates to Geospatial Coodrinates",
    "text": "5.3 Converting Pixel coordinates to Geospatial Coodrinates\nYou can use the GeoTransform to convert from pixel coordinates to real-world coordinates.\n\n# create a function to get geographic coordinates from pixel coordinates\ndef pixel_to_geo(x_pixel, y_pixel, geotransform):\n    x_geo = geotransform[0] + x_pixel * geotransform[1] + y_pixel * geotransform[2]\n    y_geo = geotransform[3] + x_pixel * geotransform[4] + y_pixel * geotransform[5]\n    return x_geo, y_geo\n\n# Example: Convert pixel (500, 500) to geographic coordinates\nx_geo, y_geo = pixel_to_geo(500, 500, geotransform)\nprint(f\"Geographic Coordinates: (W {x_geo} , N {y_geo})\")\n\nGeographic Coordinates: (W -110.86277777808898 , N 34.862777778065904)\n\n\n\n## close dataset\n\ndataset = None"
  },
  {
    "objectID": "Notebooks/Intro_to_GDAL.html#export-raster-as-cloud-optimized-geotiff-cog",
    "href": "Notebooks/Intro_to_GDAL.html#export-raster-as-cloud-optimized-geotiff-cog",
    "title": "Introduction to GDAL",
    "section": "5.4 Export raster as Cloud-optimized-geotiff COG",
    "text": "5.4 Export raster as Cloud-optimized-geotiff COG\nWhat are COGs and Why should I care?\nA Cloud Optimized GeoTIFF (COG) is a type of GeoTIFF file that has been optimized for efficient access and use in cloud-based environments. It allows users to access and stream portions of the data without needing to download the entire file, making it ideal for large geospatial datasets used in remote sensing, GIS, and mapping applications. Here are the key features and benefits of a COG:\nKey Features: 1. Internal Tiling:\n\nA COG is internally divided into smaller, equally-sized tiles, which allow for selective access to portions of the image. This structure enables the reading of only the necessary tiles for a particular region or zoom level.\n\n\nPyramidal Layers (Overviews):\n\n\nIt contains lower-resolution overviews or pyramids, which allow for quick access and visualization of the data at multiple zoom levels, much like how online map services work.\n\n\nEfficient Metadata Placement:\n\n\nThe metadata (such as georeferencing information and overviews) is placed at the beginning of the file, allowing clients to read metadata quickly without scanning the entire file. This enhances performance when accessing or visualizing the data in cloud environments.\n\n\nHTTP Range Requests:\n\n\nCOGs are designed to work efficiently over HTTP using range requests, meaning that clients can request specific byte ranges of the file to load only necessary data, rather than downloading the entire file. This is crucial for working with very large datasets in cloud storage.\n\n\nBenefits:\n\nEfficient Data Access:\n\n\nWith a COG, only the relevant parts of the image are accessed (e.g., a specific region or zoom level), which reduces data transfer costs and speeds up analysis in cloud environments like Amazon S3 or Google Cloud Storage.\n\n\nCloud-Friendly:\n\n\nCOGs are ideal for cloud-based workflows, enabling on-the-fly processing and analysis directly from cloud storage without the need for data to be downloaded to a local machine.\n\n\nInteroperability:\n\n\nCOGs are still standard GeoTIFF files, meaning they can be read by most GIS and remote sensing software. However, their cloud-optimized structure makes them more efficient for modern, web-based applications.\n\n\nScalability:\n\n\nSince COGs allow for selective data access, they are highly scalable and work well with very large datasets (hundreds of gigabytes or terabytes in size).\n(description from ChatGPT4o)\n\n\nKey Parameters in gdal.TranslateOptions:\n\n\nformat='COG': Specifies the output format as a Cloud Optimized GeoTIFF. TILING_SCHEME=DEFAULT: Ensures the raster is tiled, which is a key requirement for COG. COMPRESS=LZW: Optional compression (e.g., LZW, DEFLATE, or JPEG), which reduces file size without sacrificing much performance. BLOCKSIZE=512: Defines the tile size for internal tiling. Common sizes are 256 or 512 pixels. OVERVIEWS=IGNORE_EXISTING: Ensures overviews are generated from scratch, which are used to improve performance at different zoom levels. BIGTIFF=IF_SAFER: Ensures the file is saved as a BigTIFF if necessary\n\n\n\n# URL of the .tif file\ntif_url = 'https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/1/TIFF/historical/n35w111/USGS_1_n35w111_20240402.tif'\n\n# Open the file using GDAL\ndataset = gdal.Open(tif_url)\n\n# Specify output location and filename\noutput_cog = 'Outputs/output_cog.tif'\n\n# Define the options for creating a COG\ntranslate_options = gdal.TranslateOptions(\n    format='COG',  # Set format to COG\n    creationOptions=[\n        'COMPRESS=LZW',  # Optional: Compression to reduce file size\n        'BLOCKSIZE=512',  # Blocksize for internal tiling (e.g., 512x512 tiles)\n        'OVERVIEWS=IGNORE_EXISTING',  # Use this to generate overviews from scratch\n        'BIGTIFF=IF_SAFER'  # Ensures the file is saved as a BigTIFF if necessary\n    ]\n)\n\n# Create the Cloud Optimized GeoTIFF using gdal.Translate\ngdal.Translate(output_cog, dataset, options=translate_options)\n\nprint(f\"COG created at: {output_cog}\")\n\n# Close the dataset\ndataset = None\n\nCOG created at: Outputs/output_cog.tif"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to ATUR-WIKI",
    "section": "",
    "text": "Welcome to ATUR-WIKI\nThis is the home page of your Quarto website."
  },
  {
    "objectID": "Notebooks/CreateMkdTablefrombib.html",
    "href": "Notebooks/CreateMkdTablefrombib.html",
    "title": "",
    "section": "",
    "text": "Read the .bib file(s)\nparse the file’s contents to extract the relevant fields for each BibTeX entry\nGenerate a Markdown string with a table that includes title, journal, year, authors, and a placeholder for summaries\noutput the markdown strink so that you can copy it into your github wiki\n\n\nimport os\n\ndef extract_field(entry, field_name):\n    \"\"\"\n    Helper function to extract a field value from a bib entry.\n    \"\"\"\n    start_pattern = field_name + ' = {'\n    end_pattern = '},'\n    start_index = entry.find(start_pattern)\n    if start_index == -1:\n        # Field not found, try alternative pattern\n        start_pattern = field_name + ' = \"'\n        end_pattern = '\",'\n        start_index = entry.find(start_pattern)\n        if start_index == -1:\n            return ''  # Field not found again\n    start_index += len(start_pattern)\n    end_index = entry.find(end_pattern, start_index)\n    field_value = entry[start_index:end_index].strip()\n    # Remove additional curly braces and correct any LaTeX character formatting\n    field_value = field_value.replace('{', '').replace('}', '').replace('\\\\', '')\n    return field_value.replace('\\n', ' ')  # Remove newlines\n\ndef bib_to_markdown_table(file_path):\n    \"\"\"\n    Parse a bib file and create a markdown table with title as a hyperlink, journal, year, authors, DOI, and a summary.\n    \"\"\"\n    with open(file_path, 'r', encoding='utf-8') as file:  # Specify UTF-8 encoding\n        bib_text = file.read()\n\n    # Split the entries\n    entries = bib_text.split('@')[1:]  # Skip the empty split before the first '@'\n    \n    # Prepare the markdown table header\n    markdown_table = \"| Title | Journal | Year | Authors | DOI | Summary |\\n\"\n    markdown_table += \"| --- | --- | --- | --- | --- | --- |\\n\"\n    \n    # Process each entry\n    for entry in entries:\n        title = extract_field(entry, 'title')\n        journal = extract_field(entry, 'journal') or extract_field(entry, 'booktitle')  # Fallback to booktitle if journal is missing\n        year = extract_field(entry, 'year')\n        authors = extract_field(entry, 'author').replace(' and ', ', ')\n        doi = extract_field(entry, 'doi')\n        url = extract_field(entry, 'url')\n        \n        # Format the title as a link if a URL is available\n        title_link = f\"[{title}]({url})\" if url else title\n        \n        # Add the entry to the table\n        markdown_table += f\"| {title_link} | {journal} | {year} | {authors} | {doi} |  |\\n\"\n    \n    return markdown_table\n\n# Path to the .bib file - adjust the path as per your directory structure\nbib_file_path = 'Github/Project_Directory/Literature/Recharge_Subteam/Williams2018.bib'\n\n# Check if the file exists\nif os.path.exists(bib_file_path):\n    # Convert the .bib content to a markdown table and print it\n    markdown_output = bib_to_markdown_table(bib_file_path)\n    print(markdown_output)\nelse:\n    print(\"The specified .bib file does not exist. Please check the file path.\")\n\nThe specified .bib file does not exist. Please check the file path.\n\n\n\nbib_file_path = \"C:/Users/rl587/Documents/GitHub/ATUR-WIKI/Literature/Recharge_Subteam/Williams2018.bib\"\nbib_to_markdown_table(bib_file_path)\n\n'| Title | Journal | Year | Authors | DOI | Summary |\\n| --- | --- | --- | --- | --- | --- |\\n| [Spatial and Temporal Variability of the Impacts of Pinyon and Juniper Reduction on Hydrologic and Erosion Processes Across Climatic Gradients in the Western US: A Regional Synthesis](http://www.mdpi.com/2073-4441/10/11/1607) | Water | 2018 | Williams, C. Jason, Snyder, Keirith A., Pierson, Frederick B. | 10.3390/w10111607 |  |\\n'"
  },
  {
    "objectID": "Notebooks/Intro_to_Rasterio.html",
    "href": "Notebooks/Intro_to_Rasterio.html",
    "title": "Introduction to Rasterio",
    "section": "",
    "text": "A short tutorial using Rasterio in Python\nRasterio (description from ChatGPT4o)"
  },
  {
    "objectID": "Notebooks/Intro_to_Rasterio.html#display-basic-metadata",
    "href": "Notebooks/Intro_to_Rasterio.html#display-basic-metadata",
    "title": "Introduction to Rasterio",
    "section": "3.1 Display basic metadata",
    "text": "3.1 Display basic metadata\n\nprint(f\"CRS: {dataset.crs}\")  # Coordinate Reference System\nprint(f\"Bounds: {dataset.bounds}\")  # Spatial extent of the raster\nprint(f\"Width: {dataset.width}, Height: {dataset.height}\")  # Dimensions\nprint(f\"Number of bands: {dataset.count}\")\n\nCRS: EPSG:4269\nBounds: BoundingBox(left=-111.00166666698249, bottom=33.998333332817936, right=-109.99833333361585, top=35.001666667083896)\nWidth: 3612, Height: 3612\nNumber of bands: 1"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Download Anaconda:\n\nGo to the Anaconda Distribution website.\nDownload the installer for your operating system (Windows, macOS, or Linux).\n\nInstall Anaconda:\n\nRun the downloaded installer.\nFollow the installation prompts, accepting the default settings.\n\n\n\n\n\n\nDownload GitHub Desktop:\n\nGo to the GitHub Desktop website.\nDownload the installer for your operating system (Windows or macOS).\n\nInstall GitHub Desktop:\n\nRun the downloaded installer.\nFollow the installation prompts.\n\nSign In to GitHub Desktop:\n\nOpen GitHub Desktop after installation.\nClick “Sign in to GitHub.com” and enter your GitHub account credentials.\n\n\n\n\n\n\nVisit GitHub’s Website:\n\nGo to GitHub.\n\nSign Up:\n\nClick on the “Sign up” button in the top right corner.\nEnter your email address, create a password, and choose a username.\nFollow the prompts to complete the sign-up process, including email verification.\n\nSet Up Your Profile:\n\nOnce your account is created, you can set up your profile by adding a profile picture, bio, and other information.\n\n\n\n\n\n\n\nWho is this for: New developers, new GitHub users, and students.\nWhat you’ll learn: We’ll introduce repositories, branches, commits, and pull requests.\nWhat you’ll build: We’ll make a short Markdown file you can use as your profile README.\nPrerequisites: None. This course is a great introduction for your first day on GitHub.\nHow long: This course takes less than one hour to complete.\n\n\nIn this course, you will:\n\n\nCreate a branch\nCommit a file\nOpen a pull request\nMerge your pull requestl\n\n\n\n\n\n\nClone Repository:\n\nOpen GitHub Desktop.\nClick on “File” -&gt; “Clone repository”.\nSelect the repository from GitHub online (https://github.com/Ryan3Lima/ATUR-WIKI)\nChoose the local path where you want to clone the repository. By default it should clone to ‘~USER/documents/Github/’\nClick “Clone”.\n\n\n\n\n\n\nVisit Quarto’s get-started page\nDownload Quarto CLI (from previous page, follow steps)\n\n\n\n\n\nOpen Anaconda Prompt:\n\nSearch for “Anaconda Prompt” in your system’s applications and open it.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNow instead of using Command line we will be using anaconda prompt which is another command line interface\n\n\n\n\n\n\nNavigate to the Repository Directory:\n\n   (base) C:\\Users\\YOUR_NAME&gt; cd C:/Users/YOUR_NAME/Documents/Github/YOUR_REPO\n   (base) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt;\n\n\n\n\n\n\nNote\n\n\n\nnotice the (base) thats showing you that you are in your ‘base’ anaconda environment. I generally do not install anything in this environment except maybe jupyter notebook, many libraries conflict so you want to use different environments for different tasks.\nYou will see (base) change to (ENV_NAME) when you activate it in the next steps.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nAlso be careful with slashes in paths, your computer (if its windows) will defualt to a backslash ‘' anaconda prompt is smart enough to run things anyway with back slashes, but at various times you might have to change the backslashes to’/’ forward slashes particularly in markdown language"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#install-anaconda",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#install-anaconda",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Download Anaconda:\n\nGo to the Anaconda Distribution website.\nDownload the installer for your operating system (Windows, macOS, or Linux).\n\nInstall Anaconda:\n\nRun the downloaded installer.\nFollow the installation prompts, accepting the default settings."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#install-github-desktop",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#install-github-desktop",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Download GitHub Desktop:\n\nGo to the GitHub Desktop website.\nDownload the installer for your operating system (Windows or macOS).\n\nInstall GitHub Desktop:\n\nRun the downloaded installer.\nFollow the installation prompts.\n\nSign In to GitHub Desktop:\n\nOpen GitHub Desktop after installation.\nClick “Sign in to GitHub.com” and enter your GitHub account credentials."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#get-a-github-account",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#get-a-github-account",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Visit GitHub’s Website:\n\nGo to GitHub.\n\nSign Up:\n\nClick on the “Sign up” button in the top right corner.\nEnter your email address, create a password, and choose a username.\nFollow the prompts to complete the sign-up process, including email verification.\n\nSet Up Your Profile:\n\nOnce your account is created, you can set up your profile by adding a profile picture, bio, and other information."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#complete-the-introduction-to-github-short-course",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#complete-the-introduction-to-github-short-course",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Who is this for: New developers, new GitHub users, and students.\nWhat you’ll learn: We’ll introduce repositories, branches, commits, and pull requests.\nWhat you’ll build: We’ll make a short Markdown file you can use as your profile README.\nPrerequisites: None. This course is a great introduction for your first day on GitHub.\nHow long: This course takes less than one hour to complete.\n\n\nIn this course, you will:\n\n\nCreate a branch\nCommit a file\nOpen a pull request\nMerge your pull requestl"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#clone-this-repository-to-your-computer-using-github-desktop",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#clone-this-repository-to-your-computer-using-github-desktop",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Clone Repository:\n\nOpen GitHub Desktop.\nClick on “File” -&gt; “Clone repository”.\nSelect the repository from GitHub online (https://github.com/Ryan3Lima/ATUR-WIKI)\nChoose the local path where you want to clone the repository. By default it should clone to ‘~USER/documents/Github/’\nClick “Clone”."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#install-quarto",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#install-quarto",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Visit Quarto’s get-started page\nDownload Quarto CLI (from previous page, follow steps)"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#open-anaconda-prompt",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#open-anaconda-prompt",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Open Anaconda Prompt:\n\nSearch for “Anaconda Prompt” in your system’s applications and open it.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNow instead of using Command line we will be using anaconda prompt which is another command line interface"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#change-directory-to-the-repository",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#change-directory-to-the-repository",
    "title": "02 - Getting Started",
    "section": "",
    "text": "Navigate to the Repository Directory:\n\n   (base) C:\\Users\\YOUR_NAME&gt; cd C:/Users/YOUR_NAME/Documents/Github/YOUR_REPO\n   (base) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt;\n\n\n\n\n\n\nNote\n\n\n\nnotice the (base) thats showing you that you are in your ‘base’ anaconda environment. I generally do not install anything in this environment except maybe jupyter notebook, many libraries conflict so you want to use different environments for different tasks.\nYou will see (base) change to (ENV_NAME) when you activate it in the next steps.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nAlso be careful with slashes in paths, your computer (if its windows) will defualt to a backslash ‘' anaconda prompt is smart enough to run things anyway with back slashes, but at various times you might have to change the backslashes to’/’ forward slashes particularly in markdown language"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#update-conda",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#update-conda",
    "title": "02 - Getting Started",
    "section": "2.1 Update Conda",
    "text": "2.1 Update Conda\n\n\n\n\n\n\nNote\n\n\n\nYou generally will want to do this every few days or everytime you go to use this workflow\n\n\n(base) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt; conda update conda"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#create-a-conda-environment",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#create-a-conda-environment",
    "title": "02 - Getting Started",
    "section": "2.2 Create a Conda Environment",
    "text": "2.2 Create a Conda Environment\n(base) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt; conda create --name ENV_NAME python=3.9\n\nActivate the Environment\n\n(base) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt; conda activate ENV_NAME\n(ENV_NAME) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt;\n\n\n\n\n\n\nNote\n\n\n\nNotice the change from (base) to (ENV_NAME)"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#add-libraries-to-your-environment",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#add-libraries-to-your-environment",
    "title": "02 - Getting Started",
    "section": "2.3 Add Libraries to Your Environment",
    "text": "2.3 Add Libraries to Your Environment\n\ninstall jupyter and jupyter lab in the environment\n\n(ENV_NAME) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt; pip install jupyter jupyterlab\n\ninstall Matplotlib and Plotly\n\n(ENV_NAME) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt; pip install matplotlib plotly"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/02_Getting_Started.html#open-the-sample-jupyter-notebook",
    "href": "Notebooks/Learn_the_workflow/02_Getting_Started.html#open-the-sample-jupyter-notebook",
    "title": "02 - Getting Started",
    "section": "2.4 Open the Sample Jupyter Notebook",
    "text": "2.4 Open the Sample Jupyter Notebook\n(ENV_NAME) C:\\Users\\YOUR_NAME\\Documents\\Github\\YOUR_REPO&gt; jupyter notebook\nNow a browser tab should open to your HOME screen for juptyer, in it you will see lots of things, click and highlight ‘03_quarto_basics.ipynb’ and duplicate it. That way you have your own copy you can play with without messing up the master version of the notebook."
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/computations.html",
    "href": "Notebooks/Learn_the_workflow/computations.html",
    "title": "Quarto Computations",
    "section": "",
    "text": "import numpy as np\na = np.arange(15).reshape(3, 5)\na"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/computations.html#numpy",
    "href": "Notebooks/Learn_the_workflow/computations.html#numpy",
    "title": "Quarto Computations",
    "section": "",
    "text": "import numpy as np\na = np.arange(15).reshape(3, 5)\na"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/computations.html#matplotlib",
    "href": "Notebooks/Learn_the_workflow/computations.html#matplotlib",
    "title": "Quarto Computations",
    "section": "Matplotlib",
    "text": "Matplotlib\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)"
  },
  {
    "objectID": "Notebooks/Learn_the_workflow/computations.html#plotly",
    "href": "Notebooks/Learn_the_workflow/computations.html#plotly",
    "title": "Quarto Computations",
    "section": "Plotly",
    "text": "Plotly\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()"
  }
]